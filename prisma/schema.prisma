generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  password      String?
  balance       Float         @default(1000.0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  positions     Position[]
  sessions      Session[]
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Position {
  id               String    @id @default(cuid())
  userId           String
  symbol           String
  entryPrice       Float
  amount           Float
  leverage         Int
  type             String
  status           String
  exitPrice        Float?
  profit           Float?
  createdAt        DateTime  @default(now())
  closedAt         DateTime?
  liquidationPrice Float     @default(0)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  type      String
  status    String   @default("COMPLETED")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
